1)
a)Create Employees Table:-
CREATE TABLE Employees(
EmployeeID INT,
Firstname VARCHAR(20),
Lastname VARCHAR(20),
Dateofbirth DATE,
Department VARCHAR(20)
 ); 

b)Create Orders Table:-
CREATE TABLE Orders(
  OrderID INT,
  OrderDATE DATE,
  CustomerID INT,
  Amount DECIMAL(10,2)
);



2)
a)Insert data in Employee table:-
INSERT INTO Employee(EmployeeID, Firstname, Lastname, DateOfBirth, Department)
VALUES(1, 'Alice', 'Johnson', '1990-01-15', 'HR');

b)Insert multiple data in orders table:-
INSERT INTO Orders(OrderID, OrderDATE, CustomerID, Amount)
VALUES(1, '2004-04-10', '1234', '2000.00'),
      (2, '2005-05-28', '1235', '3000.00'),
      (3, '2006-02-24', '1236', '4000.00'),
      (4, '2007-02-19', '1237', '5000.00');



3)
a)Select all documents from employee table:-
SELECT* FROM Employee;

b)Select all documents from orders table:-
SELECT* FROM Orders;

c)Select only the FirstName and LastName from the Employees collection:-
SELECT Firstname, Lastname FROM Employee;

d)Select the OrderID and Amount from the Orders collection:-
SELECT OrderID, Amount FROM Orders;



4)
a)Update the Department of the employee with EmployeeID 1 to 'Finance':-
UPDATE employee SET Department='Finance' WHERE EmployeeID=1;

b)Update the Amount in the Orders collection where OrderID is 2 to 500.00:-
UPDATE Orders SET Amount=500.00 WHERE OrderID=2;



5)
a)Delete the employee from the Employees collection where EmployeeID is 1:-
DELETE FROM Employee WHERE EmployeeID=1;

b)Delete all orders from the Orders collection where the Amount is less than 100:-
DELETE FROM Orders WHERE Amount<100;



6)
a)Select all employees who work in the 'HR' department:-
SELECT* FROM Employee WHERE Department='HR';

b)Select all orders with an Amount greater than 300:-
SELECT* FROM Orders WHERE Amount>300;



7)
a)Select employees who work in the 'HR' department and were born after '1990-01-01':-
SELECT* FROM Employee WHERE Department='HR' AND Dateofbirth >'1990-01-01';

b)Select orders with an Amount greater than 300 and OrderDate before '2023-01-01':-
SELECT* FROM Orders WHERE Amount>300 AND OrderDATE < '2023-01-01';

c)Select employees who work in either the 'HR' or 'Finance' department:-
SELECT* FROM Employee WHERE Department='HR' OR Department='Finance';

d)Select orders with an Amount less than 100 or placed after '2023-01-01':-
SELECT* FROM Orders WHERE Amount<100 OR OrderDATE >'2023-01-01';



8)
a)Select all employees and order the results by LastName in ascending order:-
SELECT* FROM Employee ORDER BY Lastname ASC;

b)Select all orders and order the results by Amount in descending order:-
SELECT* FROM Orders ORDER BY Amount DESC;



9)
a)Count the number of employees in the Employees collection:-
SELECT COUNT(*) AS EmployeeCount FROM Employee;

b)Count the number of orders placed in the Orders collection:-
SELECT COUNT(*) AS OrderCount FROM Orders;

c)Find the average Amount of all orders in the Orders collection:-
SELECT AVG(Amount) AS AverageAmount FROM Orders;

d)Calculate the average age of employees (assuming thereâ€™s a function to calculate age from DateOfBirth):-
SELECT AVG((CURRENT_DATE) - (Dateofbirth)) AS AverageAge FROM Employee;



10)
a)Count the number of employees in each Department:-
SELECT Department, COUNT(*) AS EmployeeCount FROM Employee GROUP BY Department;

b)Calculate the total Amount of orders for each CustomerID:-
SELECT CustomerID, SUM(Amount) AS TotalAmount FROM Orders GROUP BY CustomerID;



11)
a)Find all departments that have more than 5 employees:-
SELECT Department, COUNT(*) AS EmployeeCount FROM Employee GROUP BY Department HAVING COUNT(*) > 5;

b)Find all CustomerIDs with total order Amount greater than 1000:-
SELECT CustomerID, SUM(Amount) AS TotalAmount FROM Orders GROUP BY CustomerID HAVING SUM(Amount) > 1000;



12)
a)Inner Join: Join Employees and Orders on CustomerID (assuming employees are customers) and select FirstName, LastName, and Amount:-
SELECT Employee.Firstname, Employee.Secondname, Orders.Amount
FROM Employee
INNER JOIN Orders ON Employee.EmployeeID = Orders.CustomerID;

b)Left Join: Perform a left join between Employees and Orders, returning all employees and their corresponding Order Amount if available:-
SELECT Employee.Firstname, Employee.Secondname, Orders.Amount
FROM Employee
LEFT JOIN Orders ON Employee.EmployeeID = Orders.CustomerID;

